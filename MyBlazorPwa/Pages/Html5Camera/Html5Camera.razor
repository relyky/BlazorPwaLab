@page "/html5camera"

<h3>Html5Camera.v3.0</h3>
<button @onclick="HandleStartCamera">啟動攝影機</button>
<button @onclick="HandleStopCamera">停止</button>
<p>message: @message</p>

@* needed to by the camera stream *@
<div class="@(jsrCamera.IsOpen ? "d-block" : "d-none") text-center" style="width:600px; max-width:90vw; margin:auto;">
    <video @ref="videoElement" style="width:100%; background-color:grey;" autoplay muted webkit-playsinline playsinline></video>
    <button class="btn btn-info" style="position:relative; bottom:50px; border-radius:50%;" @onclick="HandleTakePhoto">
        <span class="oi oi-camera-slr"></span>
    </button>
</div>

@* needed if you want to display the image when you take a photo *@
<img alt="photo picture" src="@photoDataUri" class="img-fluid img-thumbnail mx-auto d-block">

@code{
    [Inject] CameraInterop jsrCamera { get; init; }

    #region Resource
    ElementReference videoElement;
    #endregion

    #region State
    string photoDataUri = null;
    string message = null;
    #endregion

    protected override void OnInitialized()
    {
        base.OnInitialized();
        jsrCamera.OnCameraResponseEvnet += HandleCameraResponse;
    }

    async Task HandleStartCamera()
    {
        await jsrCamera.StartCameraAsync(videoElement);
    }

    async Task HandleStopCamera()
    {
        await jsrCamera.StopCameraAsync();
    }

    async Task HandleTakePhoto()
    {
        await jsrCamera.TakePhotoAsync();
    }


    void HandleCameraResponse(object sender, CameraInterop.CameraResponseEvnetArgs args)
    {
        switch (args.type)
        {
            case "SUCCESS":
                message = args.message;
                break;
            case "STOP":
                message = args.message;
                break;
            case "PHOTO":
                photoDataUri = args.message;
                Task.Run(async () => {
                    await jsrCamera.StopCameraAsync();
                    StateHasChanged();
                });
                break;
            default:
                message = args.message;
                break;
        }

        StateHasChanged();
    }
}
