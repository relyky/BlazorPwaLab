@page "/html5qrcode"

<h3>Html5QrCode.v4</h3>
<button @onclick="HandleScanQrCode">可連續掃描QR Code</button>
<button @onclick="HandleStopScan">停止掃描</button>
<label>
    <input type="checkbox" @bind="f_readStop" />
    掃描成功後立刻停止掃描
</label>
<br />

<button @onclick="HandleScanQrCodeOnce">掃描QR Code</button>

<div style="width:600px; max-width:80vw; border:solid 1px darkgrey; background-color:lightgrey; padding:4px; margin: 8px auto; border-radius: 4px;">
    <div id="qrcodeReader" style="visibility:hidden"></div>
</div>

<p>qrCode(@scanCount):@qrCode</p>
<p>warnMsg(@warnCount):@warnMsg</p>
<p>errorMsg(@errorCount):@errorMsg</p>

@code{
    [Inject] QrCodeInterop jsrQrCode { get; init; }

    #region Resource
    //IJSObjectReference module;
    //MyBlazor.RazorComponent.QrCodeInterop jsrQrCode;
    #endregion

    #region State
    string qrCode = null;
    int scanCount = 0;
    string warnMsg = null;
    int warnCount = 0;
    string errorMsg = null;
    int errorCount = 0;
    bool f_readStop = true;
    #endregion

    protected override void OnInitialized()
    {
        base.OnInitialized();
        jsrQrCode.OnScanResponseEvnet += HandleScanResponse;
    }

    async Task HandleScanQrCodeOnce()
    {
        scanCount = warnCount = errorCount = 0;
        qrCode = await jsrQrCode.ScanQrCodeOnce("qrcodeReader");
    }

    async void HandleScanQrCode()
    {
        scanCount = warnCount = errorCount = 0;
        await jsrQrCode.ScanQrCodeAsync("qrcodeReader", f_readStop);
    }

    async Task HandleStopScan()
    {
        await jsrQrCode.StopScanAsync();
    }

    /// <summary>
    /// 用於連續掃描 QR Code 時取得掃描結果。
    /// </summary>
    void HandleScanResponse(object sender, QrCodeInterop.ScanResponseEvnetArgs args)
    {
        switch (args.type)
        {
            case "SUCCESS":
                qrCode = args.message;
                scanCount++;
                break;
            case "WARN":
            case "STOP":
                warnMsg = args.message;
                warnCount++;
                break;
            default:
                errorMsg = args.message;
                errorCount++;
                break;
        }

        StateHasChanged();
    }
}
