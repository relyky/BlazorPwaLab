@page "/notifydemo"

<h3>Notification Demo.v1.1</h3>
<dl>
    <dt>supportInfo</dt>
    <dd>@supportInfo.ToJson()</dd>
</dl>
<hr />
<button class="btn btn-primary" @onclick="HandleNotify">通知自己</button>
<button class="btn btn-primary" @onclick="HandleQueryNotice">取出 Notice</button>

<hr />
<h4>dataList</h4>
<p>@dataList.ToJson()</p>

<hr />
<h4>message</h4>
<p>@message</p>

@code{
    [Inject] IJSRuntime jsr { get; init; }

    #region Resource
    IJSObjectReference module;
    IJSObjectReference swModule;

    public class FcmPushInfo
    {
        public string title { get; set; }
        public string body { get; set; }
        public string url { get; set; }
        public string imageUrl { get; set; }
    }

    #endregion

    #region State
    object supportInfo = null;
    List<FcmPushInfo> dataList = null;
    string message = null;
    bool f_Loading = false;
    #endregion

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            try
            {
                f_Loading = true;
                StateHasChanged();
                await Task.Delay(500); // 跑太快了拉長一點時間

                // 動態載入 JS module
                module = await jsr.InvokeAsync<IJSObjectReference>("import", "./tools/indexDbTools.js");
                swModule = await jsr.InvokeAsync<IJSObjectReference>("import", "./tools/swTools.js");

                // 檢查環境
                supportInfo = await swModule.InvokeAsync<object>("checkSupport");
            }
            finally
            {
                f_Loading = false;
                StateHasChanged();
            }
        }
    }

    async Task HandleNotify()
    {
        try
        {
            f_Loading = true;
            StateHasChanged();
            await Task.Delay(500); // 跑太快了拉長一點時間

            await module.InvokeVoidAsync("SendNotification");
            message = "SUCCESS";
        }
        catch (Exception ex)
        {
            message = ex.ToString();
        }
        finally
        {
            f_Loading = false;
            StateHasChanged();
        }
    }

    async Task HandleAddNotice()
    {

    }

    void HandleQueryNotice()
    {
        module.InvokeVoidAsync("qryNotice", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public Task<int> OnQueryResponse(string dataType, System.Text.Json.JsonElement resultList)
    {
        switch (dataType)
        {
            case "Notice":
                dataList = resultList.ToObject<List<FcmPushInfo>>();
                break;
            default:
                message = $"dataType: {dataType}, {resultList.ToString()}";
                break;
        }

        StateHasChanged();
        return Task.FromResult(0);
    }

    async Task HandleClearAllNotice()
    {

    }

}
