@page "/notifydemo"

<h3>Notification Demo.v1.1</h3>
<dl>
    <dt>supportInfo</dt>
    <dd>@supportInfo.ToJson()</dd>
</dl>
<hr />
<button class="btn btn-primary" @onclick="HandleNotify">測試 Notification</button>
<button class="btn btn-primary" @onclick="HandleQueryNotice">取出 Notice</button>

<hr />
<h4>訂閱</h4>
<EditForm Model="userSubsAttrs">
    <div class="form-group">
        <label>vapidPublicKey</label>
        <InputText class="form-control" @bind-Value="userSubsAttrs.vapidPublicKey" />
    </div>
    <div class="form-group">
        <label>User Subscription API address</label>
        <InputText class="form-control" @bind-Value="userSubsAttrs.userSubsApiUrl" />
    </div>
    <button class="btn btn-warning" @onclick="HandleSubscribe">訂閱</button>
</EditForm>

<hr />
<h4>dataList</h4>
<p>@dataList.ToJson()</p>

<hr />
<h4>message</h4>
<p>@message</p>

@code{
    [Inject] IJSRuntime jsr { get; init; }

    #region Resource
    IJSObjectReference module;
    IJSObjectReference swModule;
    DotNetObjectReference<_NotifyDemo> dotNetObject;

    class FcmPushInfo
    {
        public string title { get; set; }
        public string body { get; set; }
        public string url { get; set; }
        public string imageUrl { get; set; }
    }

    class UserSubsAttrs
    {
        public string vapidPublicKey { get; set; }
        public string userSubsApiUrl { get; set; }
    }

    #endregion

    #region State
    object supportInfo = null;
    List<FcmPushInfo> dataList = null;
    string message = null;
    bool f_Loading = false;

    UserSubscriptionInfo userSubs = new()
    {
        userCode = "beauty",
        subscription = null
    };

    UserSubsAttrs userSubsAttrs = new()
    {
        vapidPublicKey = @"BJZ8ttN_7Vn2c4hJZ9FILZKnyKkCZxgPxnTYsZ4sWjEciRm7inZcC-4Dguq-6afpCiK6dwtZHWMgNvTbpWoklQc",
        userSubsApiUrl = @"https://mywebpushserver.azurewebsites.net/api/UpdateUserSubscription"
    };

    #endregion

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dotNetObject = DotNetObjectReference.Create(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            try
            {
                f_Loading = true;
                StateHasChanged();
                await Task.Delay(500); // 跑太快了拉長一點時間

                // 動態載入 JS module
                module = await jsr.InvokeAsync<IJSObjectReference>("import", "./tools/indexDbTools.js");
                swModule = await jsr.InvokeAsync<IJSObjectReference>("import", "./tools/swTools.js");

                // 檢查環境
                supportInfo = await swModule.InvokeAsync<object>("checkSupport");
            }
            finally
            {
                f_Loading = false;
                StateHasChanged();
            }
        }
    }

    async Task HandleNotify()
    {
        try
        {
            f_Loading = true;
            StateHasChanged();
            await Task.Delay(500); // 跑太快了拉長一點時間

            await swModule.InvokeVoidAsync("SendNotification");
            message = "SUCCESS";
        }
        catch (Exception ex)
        {
            message = ex.ToString();
        }
        finally
        {
            f_Loading = false;
            StateHasChanged();
        }
    }

    async Task HandleQueryNotice()
    {
        try
        {
            dataList = await module.InvokeAsync<List<FcmPushInfo>>("qryNotice");
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
    }

    async Task HandleSubscribe()
    {
        try
        {
            f_Loading = true;
            message = "";

            var subs = await swModule.InvokeAsync<UserSubscriptionInfo.PushSubscription>("subscribeUser", userSubsAttrs.vapidPublicKey);
            userSubs.subscription = subs;

            HttpClient client = new HttpClient();
            var res = await client.CallWebApi2Async<UserSubscriptionInfo, ErrMsg>(userSubsAttrs.userSubsApiUrl, userSubs);

            message = "subscribeUser SUCCESS";
        }
        catch (Exception ex)
        {
            message = $"[Exception:{ex.GetType().Name}] {ex.Message}";
        }
        finally
        {
            f_Loading = false;
        }
    }

}
